
Drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000027  00800060  00800060  0000055e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000335  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bc  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000252  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001aa  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d0  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	18 c1       	rjmp	.+560    	; 0x238 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	c0 c1       	rjmp	.+896    	; 0x38e <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	07 c2       	rjmp	.+1038   	; 0x432 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 38       	cpi	r26, 0x87	; 135
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	50 c2       	rjmp	.+1184   	; 0x4e6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
volatile int pulse_width_us[8];
volatile unsigned char adc0[2];


int main (void)
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	1f 92       	push	r1
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFD;
  56:	8d ef       	ldi	r24, 0xFD	; 253
  58:	87 bb       	out	0x17, r24	; 23
	PORTB=0xFF;
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	88 bb       	out	0x18, r24	; 24
	
	volatile unsigned char data[i2c_buffer_size];
	
	//TWI als Slave mit Adresse slaveadr starten
	init_twi_slave(SLAVE_ADRESSE);
  5e:	81 e1       	ldi	r24, 0x11	; 17
  60:	dc d1       	rcall	.+952    	; 0x41a <init_twi_slave>
	
	OCR1A = 11999;
  62:	8f ed       	ldi	r24, 0xDF	; 223
  64:	9e e2       	ldi	r25, 0x2E	; 46
  66:	9b bd       	out	0x2b, r25	; 43
  68:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12);
  6a:	8e b5       	in	r24, 0x2e	; 46
  6c:	88 60       	ori	r24, 0x08	; 8
  6e:	8e bd       	out	0x2e, r24	; 46
	// Mode 4, CTC on OCR1A
	TIMSK |= (1 << OCIE1A);
  70:	89 b7       	in	r24, 0x39	; 57
  72:	80 61       	ori	r24, 0x10	; 16
  74:	89 bf       	out	0x39, r24	; 57
	//Set interrupt on compare match

	
	//Timer 2
	OCR2 = 99;
  76:	83 e6       	ldi	r24, 0x63	; 99
  78:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21);
  7a:	85 b5       	in	r24, 0x25	; 37
  7c:	88 60       	ori	r24, 0x08	; 8
  7e:	85 bd       	out	0x25, r24	; 37
	// Set to CTC Mode
	TIMSK |= (1 << OCIE2);
  80:	89 b7       	in	r24, 0x39	; 57
  82:	80 68       	ori	r24, 0x80	; 128
  84:	89 bf       	out	0x39, r24	; 57
	//Set interrupt on compare match
	START_TIMER2;
  86:	85 b5       	in	r24, 0x25	; 37
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	85 bd       	out	0x25, r24	; 37
	// set prescaler to 64 and starts PWM
	

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); // Set ADC prescaler
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  92:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (0 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
  94:	87 b1       	in	r24, 0x07	; 7
  96:	87 b9       	out	0x07, r24	; 7
	// No MUX values needed to be changed to use ADC0
	
	ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
  98:	35 9a       	sbi	0x06, 5	; 6
	ADCSRA |= (1 << ADEN);  // Enable ADC
  9a:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
  9c:	33 9a       	sbi	0x06, 3	; 6
	sei();	// Enable Global Interrupts
  9e:	78 94       	sei
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
  a0:	36 9a       	sbi	0x06, 6	; 6
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
	
	//i2cdatamit Werten füllen, die der Master auslesen und ändern kann
	for(uint8_t i=0;i<i2c_buffer_size;i++)
	{
		i2cdata[i]=0;
  a6:	fc 01       	movw	r30, r24
  a8:	e1 59       	subi	r30, 0x91	; 145
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	10 82       	st	Z, r1
		data[i]=0;
  ae:	e1 e0       	ldi	r30, 0x01	; 1
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	ec 0f       	add	r30, r28
  b4:	fd 1f       	adc	r31, r29
  b6:	e8 0f       	add	r30, r24
  b8:	f9 1f       	adc	r31, r25
  ba:	10 82       	st	Z, r1
  bc:	01 96       	adiw	r24, 0x01	; 1
	sei();	// Enable Global Interrupts
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
	//i2cdatamit Werten füllen, die der Master auslesen und ändern kann
	for(uint8_t i=0;i<i2c_buffer_size;i++)
  be:	85 30       	cpi	r24, 0x05	; 5
  c0:	91 05       	cpc	r25, r1
  c2:	89 f7       	brne	.-30     	; 0xa6 <main+0x5e>
	{
		i2cdata[i]=0;
		data[i]=0;
	}

	pulse_width_us[0]=1500;//rudder
  c4:	2c ed       	ldi	r18, 0xDC	; 220
  c6:	35 e0       	ldi	r19, 0x05	; 5
  c8:	30 93 77 00 	sts	0x0077, r19
  cc:	20 93 76 00 	sts	0x0076, r18
	pulse_width_us[1]=1000;//thurst
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	90 93 79 00 	sts	0x0079, r25
  d8:	80 93 78 00 	sts	0x0078, r24
	pulse_width_us[2]=1500;//elevator
  dc:	30 93 7b 00 	sts	0x007B, r19
  e0:	20 93 7a 00 	sts	0x007A, r18
	pulse_width_us[3]=1000;//aileron
  e4:	90 93 7d 00 	sts	0x007D, r25
  e8:	80 93 7c 00 	sts	0x007C, r24
	//in einer Endlosschleife den Inhalt der Buffer ausgeben
	while(1)
	{
		
		
		if (i2cdata[0] == TWI_CMD_MASTER_WRITE)
  ec:	ef e6       	ldi	r30, 0x6F	; 111
  ee:	f0 e0       	ldi	r31, 0x00	; 0
			//PORTB = messageBuf[1];
			//duty = messageBuf[1];
			//data[0] = messageBuf[0];
			
			
			data[0] = i2cdata[1];
  f0:	20 e7       	ldi	r18, 0x70	; 112
  f2:	30 e0       	ldi	r19, 0x00	; 0
			data[1] = i2cdata[2];
  f4:	0f 2e       	mov	r0, r31
  f6:	f1 e7       	ldi	r31, 0x71	; 113
  f8:	2f 2e       	mov	r2, r31
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	3f 2e       	mov	r3, r31
  fe:	f0 2d       	mov	r31, r0
			data[2] = i2cdata[3];
 100:	62 e7       	ldi	r22, 0x72	; 114
 102:	70 e0       	ldi	r23, 0x00	; 0
			data[3] = i2cdata[4];
 104:	43 e7       	ldi	r20, 0x73	; 115
 106:	50 e0       	ldi	r21, 0x00	; 0
			
			pulse_width_us[0] = 10*data[0]+1000;
 108:	0f 2e       	mov	r0, r31
 10a:	f6 e7       	ldi	r31, 0x76	; 118
 10c:	ef 2e       	mov	r14, r31
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ff 2e       	mov	r15, r31
 112:	f0 2d       	mov	r31, r0
			pulse_width_us[1] = 10*data[1]+1000;
 114:	08 e7       	ldi	r16, 0x78	; 120
 116:	10 e0       	ldi	r17, 0x00	; 0
			pulse_width_us[2] = 10*data[2]+1000;
 118:	0f 2e       	mov	r0, r31
 11a:	fa e7       	ldi	r31, 0x7A	; 122
 11c:	af 2e       	mov	r10, r31
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	bf 2e       	mov	r11, r31
 122:	f0 2d       	mov	r31, r0
			pulse_width_us[3] = 10*data[3]+1000;
 124:	0f 2e       	mov	r0, r31
 126:	fc e7       	ldi	r31, 0x7C	; 124
 128:	8f 2e       	mov	r8, r31
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	9f 2e       	mov	r9, r31
 12e:	f0 2d       	mov	r31, r0
	//messageBuf[0] = duty;
	
	//TWI_write_slave(data[3]);
	
	//i2cdata[0]=0x00;
	i2cdata[1]=adc0[0];
 130:	0f 2e       	mov	r0, r31
 132:	f4 e7       	ldi	r31, 0x74	; 116
 134:	6f 2e       	mov	r6, r31
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	7f 2e       	mov	r7, r31
 13a:	f0 2d       	mov	r31, r0
	i2cdata[2]=adc0[1];
 13c:	0f 2e       	mov	r0, r31
 13e:	f5 e7       	ldi	r31, 0x75	; 117
 140:	4f 2e       	mov	r4, r31
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	5f 2e       	mov	r5, r31
 146:	f0 2d       	mov	r31, r0
	//in einer Endlosschleife den Inhalt der Buffer ausgeben
	while(1)
	{
		
		
		if (i2cdata[0] == TWI_CMD_MASTER_WRITE)
 148:	80 81       	ld	r24, Z
 14a:	80 31       	cpi	r24, 0x10	; 16
 14c:	09 f0       	breq	.+2      	; 0x150 <main+0x108>
 14e:	58 c0       	rjmp	.+176    	; 0x200 <main+0x1b8>
			//PORTB = messageBuf[1];
			//duty = messageBuf[1];
			//data[0] = messageBuf[0];
			
			
			data[0] = i2cdata[1];
 150:	d9 01       	movw	r26, r18
 152:	8c 91       	ld	r24, X
 154:	89 83       	std	Y+1, r24	; 0x01
			data[1] = i2cdata[2];
 156:	d1 01       	movw	r26, r2
 158:	8c 91       	ld	r24, X
 15a:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = i2cdata[3];
 15c:	db 01       	movw	r26, r22
 15e:	8c 91       	ld	r24, X
 160:	8b 83       	std	Y+3, r24	; 0x03
			data[3] = i2cdata[4];
 162:	da 01       	movw	r26, r20
 164:	8c 91       	ld	r24, X
 166:	8c 83       	std	Y+4, r24	; 0x04
			
			pulse_width_us[0] = 10*data[0]+1000;
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	6c 01       	movw	r12, r24
 16e:	cc 0c       	add	r12, r12
 170:	dd 1c       	adc	r13, r13
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	8c 0d       	add	r24, r12
 180:	9d 1d       	adc	r25, r13
 182:	88 51       	subi	r24, 0x18	; 24
 184:	9c 4f       	sbci	r25, 0xFC	; 252
 186:	d7 01       	movw	r26, r14
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	9c 93       	st	X, r25
 18c:	8e 93       	st	-X, r24
			pulse_width_us[1] = 10*data[1]+1000;
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	6c 01       	movw	r12, r24
 194:	cc 0c       	add	r12, r12
 196:	dd 1c       	adc	r13, r13
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	8c 0d       	add	r24, r12
 1a6:	9d 1d       	adc	r25, r13
 1a8:	88 51       	subi	r24, 0x18	; 24
 1aa:	9c 4f       	sbci	r25, 0xFC	; 252
 1ac:	d8 01       	movw	r26, r16
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	9c 93       	st	X, r25
 1b2:	8e 93       	st	-X, r24
			pulse_width_us[2] = 10*data[2]+1000;
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	6c 01       	movw	r12, r24
 1ba:	cc 0c       	add	r12, r12
 1bc:	dd 1c       	adc	r13, r13
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	8c 0d       	add	r24, r12
 1cc:	9d 1d       	adc	r25, r13
 1ce:	88 51       	subi	r24, 0x18	; 24
 1d0:	9c 4f       	sbci	r25, 0xFC	; 252
 1d2:	d5 01       	movw	r26, r10
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	9c 93       	st	X, r25
 1d8:	8e 93       	st	-X, r24
			pulse_width_us[3] = 10*data[3]+1000;
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	6c 01       	movw	r12, r24
 1e0:	cc 0c       	add	r12, r12
 1e2:	dd 1c       	adc	r13, r13
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	8c 0d       	add	r24, r12
 1f2:	9d 1d       	adc	r25, r13
 1f4:	88 51       	subi	r24, 0x18	; 24
 1f6:	9c 4f       	sbci	r25, 0xFC	; 252
 1f8:	d4 01       	movw	r26, r8
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	9c 93       	st	X, r25
 1fe:	8e 93       	st	-X, r24
// 			PORTB = i2cdata[0];
// 			
// 		}

// TWI_CMD_MASTER_READ prepares the data from PINB in the transceiver buffer for the TWI master to fetch.
if (i2cdata[0] == TWI_CMD_MASTER_READ)
 200:	80 81       	ld	r24, Z
 202:	80 32       	cpi	r24, 0x20	; 32
 204:	61 f4       	brne	.+24     	; 0x21e <main+0x1d6>
	//messageBuf[0] = duty;
	
	//TWI_write_slave(data[3]);
	
	//i2cdata[0]=0x00;
	i2cdata[1]=data[0];
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	d9 01       	movw	r26, r18
 20a:	8c 93       	st	X, r24
	i2cdata[2]=data[1];
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	d1 01       	movw	r26, r2
 210:	8c 93       	st	X, r24
	i2cdata[3]=data[2];
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	db 01       	movw	r26, r22
 216:	8c 93       	st	X, r24
	i2cdata[4]=data[3];
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	da 01       	movw	r26, r20
 21c:	8c 93       	st	X, r24
	
}

if (i2cdata[0] == TWI_CMD_MASTER_READ_ADC)
 21e:	80 81       	ld	r24, Z
 220:	81 32       	cpi	r24, 0x21	; 33
 222:	09 f0       	breq	.+2      	; 0x226 <main+0x1de>
 224:	91 cf       	rjmp	.-222    	; 0x148 <main+0x100>
	//messageBuf[0] = duty;
	
	//TWI_write_slave(data[3]);
	
	//i2cdata[0]=0x00;
	i2cdata[1]=adc0[0];
 226:	d3 01       	movw	r26, r6
 228:	8c 91       	ld	r24, X
 22a:	d9 01       	movw	r26, r18
 22c:	8c 93       	st	X, r24
	i2cdata[2]=adc0[1];
 22e:	d2 01       	movw	r26, r4
 230:	8c 91       	ld	r24, X
 232:	d1 01       	movw	r26, r2
 234:	8c 93       	st	X, r24
 236:	88 cf       	rjmp	.-240    	; 0x148 <main+0x100>

00000238 <__vector_3>:
	
	//end.while
} //end.main

ISR (TIMER2_COMP_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
	if(i==0)
 248:	80 91 62 00 	lds	r24, 0x0062
 24c:	90 91 63 00 	lds	r25, 0x0063
 250:	89 2b       	or	r24, r25
 252:	a1 f4       	brne	.+40     	; 0x27c <__vector_3+0x44>
	{
		PORTB |= (1 << 2);
 254:	c2 9a       	sbi	0x18, 2	; 24
		//PORTB &= ~(1 << 0);
		OCR1A=pulse_width_us[0]*8-1;
 256:	80 91 76 00 	lds	r24, 0x0076
 25a:	90 91 77 00 	lds	r25, 0x0077
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	9b bd       	out	0x2b, r25	; 43
 26e:	8a bd       	out	0x2a, r24	; 42
		START_TIMER1;
 270:	8e b5       	in	r24, 0x2e	; 46
 272:	81 60       	ori	r24, 0x01	; 1
 274:	8e bd       	out	0x2e, r24	; 46
		servo[0] =1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 67 00 	sts	0x0067, r24
	}
	if(i==25)
 27c:	80 91 62 00 	lds	r24, 0x0062
 280:	90 91 63 00 	lds	r25, 0x0063
 284:	49 97       	sbiw	r24, 0x19	; 25
 286:	a1 f4       	brne	.+40     	; 0x2b0 <__vector_3+0x78>
	{
		PORTB |= (1 << 3);
 288:	c3 9a       	sbi	0x18, 3	; 24
		//PORTB &= ~(1 << 1);
		OCR1A=pulse_width_us[1]*8-1;
 28a:	80 91 78 00 	lds	r24, 0x0078
 28e:	90 91 79 00 	lds	r25, 0x0079
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	9b bd       	out	0x2b, r25	; 43
 2a2:	8a bd       	out	0x2a, r24	; 42
		START_TIMER1;
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	8e bd       	out	0x2e, r24	; 46
		servo[1] =1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 68 00 	sts	0x0068, r24
	}
	if(i==50)
 2b0:	80 91 62 00 	lds	r24, 0x0062
 2b4:	90 91 63 00 	lds	r25, 0x0063
 2b8:	c2 97       	sbiw	r24, 0x32	; 50
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <__vector_3+0xac>
	{
		PORTB |= (1 << 4);
 2bc:	c4 9a       	sbi	0x18, 4	; 24
		//PORTB &= ~(1 << 0);
		OCR1A=pulse_width_us[2]*8-1;
 2be:	80 91 7a 00 	lds	r24, 0x007A
 2c2:	90 91 7b 00 	lds	r25, 0x007B
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	9b bd       	out	0x2b, r25	; 43
 2d6:	8a bd       	out	0x2a, r24	; 42
		START_TIMER1;
 2d8:	8e b5       	in	r24, 0x2e	; 46
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	8e bd       	out	0x2e, r24	; 46
		servo[2] =1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 69 00 	sts	0x0069, r24
	}
	if(i==75)
 2e4:	80 91 62 00 	lds	r24, 0x0062
 2e8:	90 91 63 00 	lds	r25, 0x0063
 2ec:	8b 34       	cpi	r24, 0x4B	; 75
 2ee:	91 05       	cpc	r25, r1
 2f0:	a1 f4       	brne	.+40     	; 0x31a <__vector_3+0xe2>
	{
		PORTB |= (1 << 5);
 2f2:	c5 9a       	sbi	0x18, 5	; 24
		//PORTB &= ~(1 << 1);
		OCR1A=pulse_width_us[3]*8-1;
 2f4:	80 91 7c 00 	lds	r24, 0x007C
 2f8:	90 91 7d 00 	lds	r25, 0x007D
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	9b bd       	out	0x2b, r25	; 43
 30c:	8a bd       	out	0x2a, r24	; 42
		START_TIMER1;
 30e:	8e b5       	in	r24, 0x2e	; 46
 310:	81 60       	ori	r24, 0x01	; 1
 312:	8e bd       	out	0x2e, r24	; 46
		servo[3] =1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 6a 00 	sts	0x006A, r24
	}
	i++;
 31a:	80 91 62 00 	lds	r24, 0x0062
 31e:	90 91 63 00 	lds	r25, 0x0063
 322:	01 96       	adiw	r24, 0x01	; 1
	
	if(i>=200)
 324:	88 3c       	cpi	r24, 0xC8	; 200
 326:	91 05       	cpc	r25, r1
 328:	2c f4       	brge	.+10     	; 0x334 <__vector_3+0xfc>
		//PORTB &= ~(1 << 1);
		OCR1A=pulse_width_us[3]*8-1;
		START_TIMER1;
		servo[3] =1;
	}
	i++;
 32a:	90 93 63 00 	sts	0x0063, r25
 32e:	80 93 62 00 	sts	0x0062, r24
 332:	04 c0       	rjmp	.+8      	; 0x33c <__vector_3+0x104>
	
	if(i>=200)
	{
		i=0;
 334:	10 92 63 00 	sts	0x0063, r1
 338:	10 92 62 00 	sts	0x0062, r1
		//PORTB |= (1 << 0);
		//PORTB |= (1 << 1);
	}
	
	//heartbeat
	if(hb==0)
 33c:	80 91 60 00 	lds	r24, 0x0060
 340:	90 91 61 00 	lds	r25, 0x0061
 344:	89 2b       	or	r24, r25
 346:	09 f4       	brne	.+2      	; 0x34a <__vector_3+0x112>
	{
		PORTB |= (1 << 0);
 348:	c0 9a       	sbi	0x18, 0	; 24
	}
	if(hb == 500)
 34a:	80 91 60 00 	lds	r24, 0x0060
 34e:	90 91 61 00 	lds	r25, 0x0061
 352:	84 3f       	cpi	r24, 0xF4	; 244
 354:	91 40       	sbci	r25, 0x01	; 1
 356:	09 f4       	brne	.+2      	; 0x35a <__vector_3+0x122>
	{
		PORTB &= ~(1 << 0);
 358:	c0 98       	cbi	0x18, 0	; 24
	}
	hb++;
 35a:	80 91 60 00 	lds	r24, 0x0060
 35e:	90 91 61 00 	lds	r25, 0x0061
 362:	01 96       	adiw	r24, 0x01	; 1
	if(hb >= 5000)
 364:	88 38       	cpi	r24, 0x88	; 136
 366:	23 e1       	ldi	r18, 0x13	; 19
 368:	92 07       	cpc	r25, r18
 36a:	2c f4       	brge	.+10     	; 0x376 <__vector_3+0x13e>
	}
	if(hb == 500)
	{
		PORTB &= ~(1 << 0);
	}
	hb++;
 36c:	90 93 61 00 	sts	0x0061, r25
 370:	80 93 60 00 	sts	0x0060, r24
 374:	04 c0       	rjmp	.+8      	; 0x37e <__vector_3+0x146>
	if(hb >= 5000)
	{
		hb=0;
 376:	10 92 61 00 	sts	0x0061, r1
 37a:	10 92 60 00 	sts	0x0060, r1
	if (start_count){
		rise++;
	}
	
	*/
}
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__vector_6>:
	
	


ISR (TIMER1_COMPA_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	8f 93       	push	r24
	
	if(servo[0])
 39a:	80 91 67 00 	lds	r24, 0x0067
 39e:	88 23       	and	r24, r24
 3a0:	31 f0       	breq	.+12     	; 0x3ae <__vector_6+0x20>
	{
		//PORTB |= (1 << 0);
		PORTB &= ~(1 << 2);
 3a2:	c2 98       	cbi	0x18, 2	; 24
		STOP_TIMER1;
 3a4:	8e b5       	in	r24, 0x2e	; 46
 3a6:	88 7f       	andi	r24, 0xF8	; 248
 3a8:	8e bd       	out	0x2e, r24	; 46
		servo[0]=0;
 3aa:	10 92 67 00 	sts	0x0067, r1
	}
	if(servo[1])
 3ae:	80 91 68 00 	lds	r24, 0x0068
 3b2:	88 23       	and	r24, r24
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <__vector_6+0x34>
	{
		//PORTB |= (1 << 0);
		PORTB &= ~(1 << 3);
 3b6:	c3 98       	cbi	0x18, 3	; 24
		STOP_TIMER1;
 3b8:	8e b5       	in	r24, 0x2e	; 46
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	8e bd       	out	0x2e, r24	; 46
		servo[1]=0;
 3be:	10 92 68 00 	sts	0x0068, r1
	}
	if(servo[2])
 3c2:	80 91 69 00 	lds	r24, 0x0069
 3c6:	88 23       	and	r24, r24
 3c8:	31 f0       	breq	.+12     	; 0x3d6 <__vector_6+0x48>
	{
		//PORTB |= (1 << 0);
		PORTB &= ~(1 << 4);
 3ca:	c4 98       	cbi	0x18, 4	; 24
		STOP_TIMER1;
 3cc:	8e b5       	in	r24, 0x2e	; 46
 3ce:	88 7f       	andi	r24, 0xF8	; 248
 3d0:	8e bd       	out	0x2e, r24	; 46
		servo[2]=0;
 3d2:	10 92 69 00 	sts	0x0069, r1
	}
	if(servo[3])
 3d6:	80 91 6a 00 	lds	r24, 0x006A
 3da:	88 23       	and	r24, r24
 3dc:	31 f0       	breq	.+12     	; 0x3ea <__vector_6+0x5c>
	{
		//PORTB |= (1 << 0);
		PORTB &= ~(1 << 5);
 3de:	c5 98       	cbi	0x18, 5	; 24
		STOP_TIMER1;
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	88 7f       	andi	r24, 0xF8	; 248
 3e4:	8e bd       	out	0x2e, r24	; 46
		servo[3]=0;
 3e6:	10 92 6a 00 	sts	0x006A, r1
	}
}
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_14>:

ISR(ADC_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
	adc0[0] = ADCL;
 402:	84 b1       	in	r24, 0x04	; 4
 404:	80 93 74 00 	sts	0x0074, r24
	adc0[1] = ADCH;
 408:	85 b1       	in	r24, 0x05	; 5
 40a:	80 93 75 00 	sts	0x0075, r24
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <init_twi_slave>:
/*Initaliserung des TWI-Inteface. Muss zu Beginn aufgerufen werden, sowie bei einem Wechsel der Slave Adresse
Parameter adr: gewünschte Slave-Adresse
*/
void init_twi_slave(uint8_t adr)
{
	TWAR= adr; //Adresse setzen
 41a:	82 b9       	out	0x02, r24	; 2
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
 41c:	86 b7       	in	r24, 0x36	; 54
 41e:	8f 7d       	andi	r24, 0xDF	; 223
 420:	86 bf       	out	0x36, r24	; 54
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE);
 422:	86 b7       	in	r24, 0x36	; 54
 424:	85 64       	ori	r24, 0x45	; 69
 426:	86 bf       	out	0x36, r24	; 54
	buffer_adr=0xFF;
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	80 93 86 00 	sts	0x0086, r24
	sei();
 42e:	78 94       	sei
 430:	08 95       	ret

00000432 <__vector_17>:

/*ISR, die bei einem Ereignis auf dem Bus ausgelöst wird. Im Register TWSR befindet sich dann
ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect)
{
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	8f 93       	push	r24
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	//uint8_t data=0;

	switch (TW_STATUS) //TWI-Statusregister prüfen und nötige Aktion bestimmen
 442:	81 b1       	in	r24, 0x01	; 1
 444:	88 7f       	andi	r24, 0xF8	; 248
 446:	80 3a       	cpi	r24, 0xA0	; 160
 448:	d9 f1       	breq	.+118    	; 0x4c0 <__stack+0x61>
 44a:	38 f4       	brcc	.+14     	; 0x45a <__vector_17+0x28>
 44c:	80 38       	cpi	r24, 0x80	; 128
 44e:	a9 f0       	breq	.+42     	; 0x47a <__stack+0x1b>
 450:	88 38       	cpi	r24, 0x88	; 136
 452:	e1 f1       	breq	.+120    	; 0x4cc <__stack+0x6d>
 454:	80 36       	cpi	r24, 0x60	; 96
 456:	61 f0       	breq	.+24     	; 0x470 <__stack+0x11>
 458:	3c c0       	rjmp	.+120    	; 0x4d2 <__stack+0x73>
 45a:	88 3b       	cpi	r24, 0xB8	; 184
 45c:	19 f1       	breq	.+70     	; 0x4a4 <__stack+0x45>
 45e:	18 f4       	brcc	.+6      	; 0x466 <__stack+0x7>
 460:	88 3a       	cpi	r24, 0xA8	; 168
 462:	f1 f0       	breq	.+60     	; 0x4a0 <__stack+0x41>
 464:	36 c0       	rjmp	.+108    	; 0x4d2 <__stack+0x73>
 466:	80 3c       	cpi	r24, 0xC0	; 192
 468:	71 f1       	breq	.+92     	; 0x4c6 <__stack+0x67>
 46a:	88 3c       	cpi	r24, 0xC8	; 200
 46c:	79 f1       	breq	.+94     	; 0x4cc <__stack+0x6d>
 46e:	31 c0       	rjmp	.+98     	; 0x4d2 <__stack+0x73>
	{

		// Slave Receiver

		case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave was addresed
		TWCR_ACK; // received next data byte, send ACK
 470:	85 ec       	ldi	r24, 0xC5	; 197
 472:	86 bf       	out	0x36, r24	; 54
		buffer_adr=0; //buffer position is undefined
 474:	10 92 86 00 	sts	0x0086, r1
		break;
 478:	2e c0       	rjmp	.+92     	; 0x4d6 <__stack+0x77>
			TWCR_ACK;	// receive next byte of data, ACK then to request next byte
		}
		else //Further access, after the position has been set in the buffer. Now ready to receive and store the data
		{*/

			if(buffer_adr<i2c_buffer_size+1)
 47a:	80 91 86 00 	lds	r24, 0x0086
 47e:	86 30       	cpi	r24, 0x06	; 6
 480:	38 f4       	brcc	.+14     	; 0x490 <__stack+0x31>
			{
				i2cdata[buffer_adr]=TWDR; //Write data in Buffer
 482:	e0 91 86 00 	lds	r30, 0x0086
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	83 b1       	in	r24, 0x03	; 3
 48a:	e1 59       	subi	r30, 0x91	; 145
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	80 83       	st	Z, r24
				
			}
		
			buffer_adr++; //Buffer address continue to count on the next write access
 490:	80 91 86 00 	lds	r24, 0x0086
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 86 00 	sts	0x0086, r24
			TWCR_ACK;
 49a:	85 ec       	ldi	r24, 0xC5	; 197
 49c:	86 bf       	out	0x36, r24	; 54
		//}
		break;
 49e:	1b c0       	rjmp	.+54     	; 0x4d6 <__stack+0x77>

		//Slave transmitter

		case TW_ST_SLA_ACK: //0xA8 Slave was addressed in read mode and has an ACK returned.
		//Here there is no break! The following code so it is also carried out!
			buffer_adr=0;
 4a0:	10 92 86 00 	sts	0x0086, r1
		
		case TW_ST_DATA_ACK: //0xB8 Slave Transmitter, Data has been requested

		
			//TWDR=buffer_adr++;
			TWDR = i2cdata[buffer_adr++]; //Send data byte
 4a4:	e0 91 86 00 	lds	r30, 0x0086
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	8e 0f       	add	r24, r30
 4ac:	80 93 86 00 	sts	0x0086, r24
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e1 59       	subi	r30, 0x91	; 145
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	80 81       	ld	r24, Z
 4b8:	83 b9       	out	0x03, r24	; 3
			//buffer_adr++; //further include buffer address for Next Byte
		
		
		TWCR_ACK;
 4ba:	85 ec       	ldi	r24, 0xC5	; 197
 4bc:	86 bf       	out	0x36, r24	; 54
		break;
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__stack+0x77>
		case TW_SR_STOP:
		TWCR_ACK;
 4c0:	85 ec       	ldi	r24, 0xC5	; 197
 4c2:	86 bf       	out	0x36, r24	; 54
		break;
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__stack+0x77>
		case TW_ST_DATA_NACK: // 0xC0 Demanded no more data
		TWCR_ACK
 4c6:	85 ec       	ldi	r24, 0xC5	; 197
 4c8:	86 bf       	out	0x36, r24	; 54
		break;
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__stack+0x77>
		case TW_SR_DATA_NACK: // 0x88
		case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
			TWCR =   (1<<TWSTO)|(1<<TWINT);   //Recover from TWI_BUS_ERROR, this will release the SDA and SCL pins thus enabling other devices to use the bus
 4cc:	80 e9       	ldi	r24, 0x90	; 144
 4ce:	86 bf       	out	0x36, r24	; 54
		break;
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__stack+0x77>
		default:
		TWCR_ACK;
 4d2:	85 ec       	ldi	r24, 0xC5	; 197
 4d4:	86 bf       	out	0x36, r24	; 54
		break;
		
	} //end.switch (TW_STATUS)
} //end.ISR(TWI_vect)
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <_exit>:
 4e6:	f8 94       	cli

000004e8 <__stop_program>:
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <__stop_program>
